{{- $dirinit_image := .Values.image.dirinit_container_override | default (printf "%s/dirinit:%s" .Values.image.repository .Chart.AppVersion) }}
{{- $redis_image := .Values.image.redis_container_override | default (printf "%s/redis:%s" .Values.image.repository .Chart.AppVersion) }}
{{- if .Values.netbox.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: netbox-redis
spec:
  ports:
    - port: 6379
      protocol: TCP
      name: redis
  selector:
    name: netbox-redis

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: netbox-redis
spec:
  selector:
    matchLabels:
      name: netbox-redis
  template:
    metadata:
      labels:
        name: netbox-redis
    spec:
      containers:
      - name: redis-container
        image: "{{ $redis_image }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        stdin: false
        tty: true
        command: ["/sbin/tini"]
        args: ["--",
               "/usr/local/bin/docker-uid-gid-setup.sh",
               "/usr/local/bin/service_check_passthrough.sh",
               "-s",
               "netbox",
               "sh",
               "-c",
               "redis-server --appendonly yes --requirepass $(REDIS_PASSWORD)"]
        ports:
          - name: redis
            protocol: TCP
            containerPort: 6379
        envFrom:
          - configMapRef:
              name: process-env
          - configMapRef:
              name: ssl-env
          - configMapRef:
              name: netbox-common-env
          - secretRef:
              name: netbox-redis-env
        env:
          - name: VIRTUAL_HOST
            value: "redis.malcolm.local"
        livenessProbe:
          exec:
            command:
             - sh
             - "-c"
             - |
               /bin/bash <<'EOF'

               [[ "$NETBOX_REDIS_DISABLED" == 'true' ]] || ( pidof redis-server || exit 1 )

               EOF
          initialDelaySeconds: 45
          periodSeconds: 60
          timeoutSeconds: 15
          successThreshold: 1
          failureThreshold: 10
        volumeMounts:
          - mountPath: /var/local/ca-trust/configmap
            name: redis-var-local-catrust-volume
          - mountPath: /data
            name: redis-volume
            subPath: netbox/redis
      initContainers:
      - name: redis-dirinit-container
        image: "{{ $dirinit_image }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        stdin: false
        tty: true
        securityContext:
          runAsGroup: 0
          runAsUser: 0
        envFrom:
          - configMapRef:
              name: process-env
        env:
          - name: PUSER_MKDIR
            value: "/data/config:netbox/redis"
        volumeMounts:
          - name: redis-volume
            mountPath: "/data/config"
      volumes:
        - name: redis-var-local-catrust-volume
          configMap:
            name: var-local-catrust
        - name: redis-volume
          persistentVolumeClaim:
            claimName: config-claim
{{- end }}
