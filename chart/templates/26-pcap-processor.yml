{{- $dirinit_image := .Values.image.dirinit_container_override | default (printf "%s/dirinit:%s" .Values.image.repository .Chart.AppVersion) }}
{{- $pcap_monitor_image := .Values.image.pcap_monitor_container_override | default (printf "%s/pcap-monitor:%s" .Values.image.repository .Chart.AppVersion) }}
{{- $zeek_image := .Values.image.zeek_container_override | default (printf "%s/zeek:%s" .Values.image.repository .Chart.AppVersion) }}
{{- $suricata_image := .Values.image.suricata_container_override | default (printf "%s/suricata:%s" .Values.image.repository .Chart.AppVersion) }}
{{- if .Values.capture_mode == "pipeline" }}
---
apiVersion: v1
data:
  AUTO_TAG: "true"
  PCAP_MONITOR_HOST: "localhost"
  PCAP_PIPELINE_IGNORE_PREEXISTING: "true"
  PCAP_PIPELINE_POLLING: "false"
  PCAP_PIPELINE_POLLING_ASSUME_CLOSED_SEC: "10"
  PCAP_PIPELINE_VERBOSITY: "-vv"
  EXTRA_TAGS: "{{ .Values.upload_common_env.extra_tags }}"
  OPENSEARCH_URL: ""
  OPENSEARCH_PRIMARY: ""
  OPENSEARCH_CREDS_CONFIG_FILE: ""
  OPENSEARCH_SSL_CERTIFICATE_VERIFICATION: ""
  # may need to be changed to /zeek/live/logs/current
  ZEEK_PATH: "/zeek"
  PCAP_PATH: "/pcap/arkime-live"
  WATCHER_UPLOAD: "false"
  WATCHER_PUBLISH: "true"
kind: ConfigMap
metadata:
  name: upload-pcap-offline-env

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: pcap-processor-daemonset
spec:
  selector:
    matchLabels:
      name: pcap-processor-daemonset
  template:
    metadata:
      labels:
        name: pcap-processor-daemonset
    spec:
      serviceAccountName: {{ .Values.zeek_chart_overrides.serviceAccountName | default "default" }}
      containers:
      - name: pcap-monitor-container
        image: "{{ $pcap_monitor_image }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        stdin: false
        tty: true
        env:
          - name: PCAP_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
        ports:
          - name: zmq
            protocol: TCP
            containerPort: 30441
        envFrom:
          - configMapRef:
              name: process-env
          - configMapRef:
              name: ssl-env
          - configMapRef:
              name: upload-pcap-offline-env
        livenessProbe:
          exec:
            command:
              - /usr/local/bin/container_health.sh
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 15
          successThreshold: 1
          failureThreshold: 10
        volumeMounts:
        - mountPath: /var/local/ca-trust/configmap
          name: var-local-catrust-volume
        - mountPath: "/pcap"
          name: pcap-volume
        - mountPath: "/zeek"
          name: zeek-volume
# Start of the ZEEK container
      - name: zeek-container
        image: "{{ $zeek_image }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        stdin: false
        tty: true
        securityContext:
          runAsGroup: 0
          runAsUser: 0
        envFrom:
          - configMapRef:
              name: process-env
          - configMapRef:
              name: ssl-env
          - configMapRef:
              name: upload-pcap-offline-env
          - configMapRef:
              name: zeek-env
          - secretRef:
              name: zeek-secret-env
          - configMapRef:
              name: zeek-offline-env
          {{- if .Values.kafka.enabled }}
          - configMapRef:
              name: kafka-config
          {{- end }}
        env:
          - name: PCAP_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: PCAP_PROCESSED_DIRECTORY
            value: "/pcap/arkime-live"
        livenessProbe:
          exec:
            command:
            - /usr/local/bin/container_health.sh
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 15
          successThreshold: 1
          failureThreshold: 10
        volumeMounts:
          - mountPath: /var/local/ca-trust/configmap
            name: var-local-catrust-volume
          - mountPath: "/pcap"
            name: pcap-volume
          - mountPath: "/zeek/extract_files"
            name: extract-zeek-volume
            subPath: "extract_files"
          - mountPath: "/zeek/upload"
            name: zeek-volume
            subPath: "upload"
          - mountPath: "/opt/zeek/share/zeek/site/intel-preseed/configmap"
            name: zeek-offline-intel-preseed-volume
          - mountPath: "/opt/zeek/share/zeek/site/intel"
            name: zeek-intel-volume
            subPath: "zeek/intel"
          {{- if ne (len .Values.zeek_chart_overrides.offline_upload_volumeMounts) 0 }}
          {{- toYaml .Values.zeek_chart_overrides.offline_upload_volumeMounts | nindent 10 }}
          {{- else }}
          - mountPath: "/opt/zeek/share/zeek/site/custom/configmap"
            name: zeek-custom-volume
          {{- end }}
      - name: suricata-container
        image: "{{ $suricata_image }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        stdin: false
        tty: true
        securityContext:
          # TODO we should not be using root here
          runAsGroup: 0
          runAsUser: 0
        envFrom:
          - configMapRef:
              name: process-env
          - configMapRef:
              name: ssl-env
          - configMapRef:
              name: upload-pcap-offline-env
          - configMapRef:
              name: suricata-env
          - configMapRef:
              name: suricata-offline-env
        env:
          - name: PCAP_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: PCAP_PROCESSED_DIRECTORY
            value: "/data/pcap/arkime-live"
        livenessProbe:
          exec:
            command:
            - /usr/local/bin/container_health.sh
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 15
          successThreshold: 1
          failureThreshold: 10
        volumeMounts:
          - mountPath: /var/local/ca-trust/configmap
            name: var-local-catrust-volume
          - mountPath: "/data/pcap"
            name: pcap-volume
          - mountPath: "/var/log/suricata"
            name: suricata-logs-volume
          {{- if ne (len .Values.suricata_chart_overrides.volumeMounts) 0 }}
          {{- toYaml .Values.suricata_chart_overrides.volumeMounts | nindent 10 }}
          {{- else }}
          - mountPath: "/opt/suricata/rules/configmap"
            name: suricata-custom-rules-volume
          - mountPath: "/opt/suricata/include-configs/configmap"
            name: suricata-custom-configs-volume
          {{- end }}
      {{- if ne (len .Values.suricata_chart_overrides.sideCars) 0 }}
      {{- toYaml .Values.suricata_chart_overrides.sideCars | nindent 6 }}
      {{- end }}
      initContainers:
      - name: dirinit-container
        image: "{{ $dirinit_image }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        stdin: false
        tty: true
        securityContext:
          runAsGroup: 0
          runAsUser: 0
        envFrom:
          - configMapRef:
              name: process-env
        env:
          - name: PUSER_CHOWN
            value: /data/pcap;/zeek;/data/config
          - name: PUSER_MKDIR
            value: /data/pcap:processed,upload;/data/config:zeek/intel/Mandiant,zeek/intel/MISP,zeek/intel/STIX;/zeek:current,live,processed,upload,extract_files/preserved,extract_files/quarantine
        volumeMounts:
          - name: pcap-volume
            mountPath: "/data/pcap" 
          - name: zeek-intel-volume
            mountPath: "/data/config"
          - name: zeek-volume
            mountPath: "/zeek/current"
            subPath: "current"
          - name: zeek-volume
            mountPath: "/zeek/live"
            subPath: "live"
          - name: zeek-volume
            mountPath: "/zeek/processed"
            subPath: "processed"
          - name: zeek-volume
            mountPath: "/zeek/upload"
            subPath: "upload"
          - mountPath: "/zeek/extract_files"
            name: extract-zeek-volume
            subPath: "extract_files"
      {{- if ne (len .Values.zeek_chart_overrides.extra_init_containers) 0 }}
      {{- toYaml .Values.zeek_chart_overrides.extra_init_containers | nindent 6 }}
      {{- end }}
      volumes:      
      - name: var-local-catrust-volume
        configMap:
          name: var-local-catrust
      - name: pcap-volume
        hostPath:
          path: "{{ .Values.arkime_live.pcap_hostpath }}"
          type: DirectoryOrCreate
      # Zeek volumes
      - name: zeek-volume
        hostPath:
          path: "{{ .Values.zeek_live.zeek_log_path }}"
          type: DirectoryOrCreate
      - name: zeek-offline-intel-preseed-volume
        configMap:
          name: zeek-intel-preseed
      - name: zeek-intel-volume
        persistentVolumeClaim:
          claimName: config-claim      
      - name: extract-zeek-volume
        persistentVolumeClaim:
          claimName: zeek-claim
      {{- if ne (len .Values.zeek_chart_overrides.offline_upload_volumes) 0 }}
      {{- toYaml .Values.zeek_chart_overrides.offline_upload_volumes | nindent 6 }}
      {{- else }}
      - name: zeek-custom-volume
        configMap:
          name: zeek-custom
      {{- end }}
      # Suricata volumes
      - name: suricata-logs-volume
        hostPath:
          path: "{{ .Values.suricata_live.suricata_log_path }}"
          type: DirectoryOrCreate
      {{- if ne (len .Values.suricata_chart_overrides.volumes) 0 }}
      {{- toYaml .Values.suricata_chart_overrides.volumes | nindent 6 }}
      {{- else }}
      - name: suricata-custom-rules-volume
        configMap:
          name: suricata-rules
      - name: suricata-custom-configs-volume
        configMap:
          name: suricata-configs
      {{- end }}
{{- end }}