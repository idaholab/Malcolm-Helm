---
apiVersion: v1
data:
  # Whether or not Arkime should analyze uploaded PCAP files
  ARKIME_AUTO_ANALYZE_PCAP_FILES: "true"
  # Whether or not Arkime should analyze captured PCAP files captured
  #   by netsniff-ng/tcpdump (see PCAP_ENABLE_NETSNIFF and PCAP_ENABLE_TCPDUMP
  #   below). If ARKIME_LIVE_CAPTURE is true, this should be false: otherwise
  #   Arkime will see duplicate traffic.
  ARKIME_ROTATED_PCAP: "true"
  ARKIME_PCAP_PROCESSOR: "true"
  # The number of Arkime processes for analyzing uploaded PCAP files allowed
  #   to run concurrently
  ARKIME_AUTO_ANALYZE_PCAP_THREADS: "1"
  VIEWER: "on"
  WISE: "on"
kind: ConfigMap
metadata:
  name: arkime-offline-env

---
apiVersion: v1
data:
  ARKIME_SSL: "false"
  ARKIME_VIEWER_PORT: "8005"
  # Whether or not Arkime is allowed to delete uploaded/captured PCAP
  #   https://arkime.com/faq#pcap-deletion
  MANAGE_PCAP_FILES: "true"
  OPENSEARCH_MAX_SHARDS_PER_NODE: "2500"
  # debug flag for config.ini (https://arkime.com/settings#debug)
  ARKIME_DEBUG_LEVEL: "{{ .Values.arkime_env.arkime_debug_level }}"
{{- if ne .Values.siem_env.malcolm_network_index_pattern "arkime_sessions3-*" }}
  # Always query all indices instead of trying to calculate which ones
  #   https://arkime.com/settings#queryAllIndices
  ARKIME_QUERY_ALL_INDICES: "true"
{{- else }}
  ARKIME_QUERY_ALL_INDICES: "false"
{{- end }}
{{- if and .Values.external_elasticsearch.enabled .Values.external_elasticsearch.elastic_cert_name }}
  ARKIME_CERTFILE: "/usr/local/share/ca-certificates/elastic_ca.crt"
{{- end }}
{{- if .Values.is_production }}
  {{- with .Values.arkime_env.production }}
  ARKIME_FREESPACEG: "{{ .free_space_g }}"
  # How often to create a new index in OpenSearch/Elasticsearch
  #   https://arkime.com/settings#rotateIndex
  ARKIME_ROTATE_INDEX: "{{ .rotate_index }}"
  # These variables manage setting for Arkime's ILM/ISM features (https://arkime.com/faq#ilm)
  # Whether or not Arkime should perform index management
  INDEX_MANAGEMENT_ENABLED: "{{ .index_management_enabled }}"
  # Time in hours/days before moving to warm and force merge (number followed by h or d)
  INDEX_MANAGEMENT_OPTIMIZATION_PERIOD: "{{ .index_management_optimization_period }}"
  # Time in hours/days before deleting index (number followed by h or d)
  INDEX_MANAGEMENT_RETENTION_TIME: "{{ .index_management_retention_time }}"
  # Number of replicas for older sessions indices
  INDEX_MANAGEMENT_OLDER_SESSION_REPLICAS: "{{ .index_management_older_session_replicas }}"
  # Number of weeks of history to retain
  INDEX_MANAGEMENT_HISTORY_RETENTION_WEEKS: "{{ .index_management_history_retention_weeks }}"
  # Number of segments to optimize sessions for
  INDEX_MANAGEMENT_SEGMENTS: "{{ .index_management_segments }}"
  # Whether or not Arkime should use a hot/warm design (storing non-session data in a warm index)
  INDEX_MANAGEMENT_HOT_WARM_ENABLED: "{{ .index_management_hot_warm_enabled }}"
  # Specify the max number of indices for querying SPI data, or set to -1 to disable any max.
  #   The Arkime documentation warns "OpenSearch/Elasticsearch MAY blow up if we ... search too many indices."
  #   https://arkime.com/settings#spiDataMaxIndices
  ARKIME_SPI_DATA_MAX_INDICES: "{{ .spi_data_max_indices }}"
  {{- end }}
{{- else }}
  {{- with .Values.arkime_env.development }}
  ARKIME_FREESPACEG: "{{ .free_space_g }}"
  ARKIME_ROTATE_INDEX: "{{ .rotate_index }}"
  INDEX_MANAGEMENT_ENABLED: "{{ .index_management_enabled }}"
  INDEX_MANAGEMENT_OPTIMIZATION_PERIOD: "{{ .index_management_optimization_period }}"
  INDEX_MANAGEMENT_RETENTION_TIME: "{{ .index_management_retention_time }}"
  INDEX_MANAGEMENT_OLDER_SESSION_REPLICAS: "{{ .index_management_older_session_replicas }}"
  INDEX_MANAGEMENT_HISTORY_RETENTION_WEEKS: "{{ .index_management_history_retention_weeks }}"
  INDEX_MANAGEMENT_SEGMENTS: "{{ .index_management_segments }}"
  INDEX_MANAGEMENT_HOT_WARM_ENABLED: "{{ .index_management_hot_warm_enabled }}"
  ARKIME_SPI_DATA_MAX_INDICES: "{{ .spi_data_max_indices }}"
  {{- end }}
{{- end }}
kind: ConfigMap
metadata:
  name: arkime-env

---
apiVersion: v1
stringData:
  # MaxMind GeoIP database update API key
  MAXMIND_GEOIP_DB_LICENSE_KEY: "{{ .Values.maxmind.license_key }}"
  # Alternate download URL for MaxMind MMDB tarballs
  MAXMIND_GEOIP_DB_ALTERNATE_DOWNLOAD_URL: "{{ .Values.maxmind.alternate_url }}"
  # Password hash secret for Arkime viewer cluster (see https://arkime.com/settings)
  ARKIME_PASSWORD_SECRET: "{{ .Values.auth.arkime_password }}"
kind: Secret
metadata:
  name: arkime-secret-env
type: Opaque
{{- if .Values.arkime_live.enabled }}
---
apiVersion: v1
data:
  # Whether or Arkime should monitor live traffic on a local
  #   interface (PCAP_IFACE in pcap-capture.env specifies interface)
  ARKIME_LIVE_CAPTURE: "true"
  ARKIME_MAGIC_MODE: basic
  ARKIME_PCAP_WRITE_METHOD: "simple"
  ARKIME_PCAP_READ_METHOD: tpacketv3
  ARKIME_PCAP_PROCESSOR: "false"
  {{- if .Values.is_production }}
    {{- with .Values.arkime_live.production }}
  # Live capture tuning parameters
  #(since 4.0.0) The type of seekable compression to use on pcap files. Zstd (don't use before 4.5.1) will has better compression for less cpu than glib. Valid values are: none, gzip, zstd (>= 4.5.1)
  ARKIME_COMPRESSION_TYPE: "{{ .arkime_compression_type }}"
  ARKIME_COMPRESSION_LEVEL: "{{ .arkime_compression_level }}"
  #Size of indexing request to send to OpenSearch/Elasticsearch. Increase if monitoring a high bandwidth network.
  ARKIME_DB_BULK_SIZE: "{{ .arkime_db_bulk_size }}"
  #How many packets per packet thread that can be waiting to be processed. Arkime will start dropping packets if the queue fills up.
  ARKIME_MAX_PACKETS_IN_QUEUE: "{{ .arkime_max_packets_in_queue }}"
  #Number of threads to use to process packets AFTER the reader has received the packets. This also controls how many packet queues there are, since each thread has its own queue. Basically how much CPU to dedicate to parsing the packets. Increase this if you get errors about dropping packets or the packetQ is over flowing. If using the simple writer, this also controls how many pcap files are open for writing. We recommend about 2 x Gbps. Making this value too large may cause issues with Arkime.
  ARKIME_PACKET_THREADS: "{{ .arkime_packet_threads }}"
  #Buffer size when writing pcap files. Should be a multiple of the raid 5/xfs stripe size and multiple of 4096 if using direct/thread-direct pcapWriteMethod
  ARKIME_PCAP_WRITE_SIZE: "{{ .arkime_pcap_write_size }}"
  #The number of threads used to read packets from each interface. These threads take the packets from the AF packet interface and place them into the packet queues.
  ARKIME_TPACKETV3_NUM_THREADS: "{{ .arkime_tpacketv3_num_threads }}"
  #The block size in bytes used for reads from each interface. There are 120 blocks per interface.
  ARKIME_TPACKETV3_BLOCK_SIZE: "{{ .arkime_tpacketv3_block_size }}"
    {{- end }}
  {{- else }}
    {{- with .Values.arkime_live.development }}
  ARKIME_COMPRESSION_TYPE: "{{ .arkime_compression_type }}"
  ARKIME_COMPRESSION_LEVEL: "{{ .arkime_compression_level }}"
  ARKIME_DB_BULK_SIZE: "{{ .arkime_db_bulk_size }}"
  ARKIME_MAX_PACKETS_IN_QUEUE: "{{ .arkime_max_packets_in_queue }}"
  ARKIME_PACKET_THREADS: "{{ .arkime_packet_threads }}"
  ARKIME_PCAP_WRITE_SIZE: "{{ .arkime_pcap_write_size }}"
  ARKIME_TPACKETV3_NUM_THREADS: "{{ .arkime_tpacketv3_num_threads }}"
  ARKIME_TPACKETV3_BLOCK_SIZE: "{{ .arkime_tpacketv3_block_size }}"
    {{- end }}
  {{- end }}

  VIEWER: "on"
  WISE: "off"
kind: ConfigMap
metadata:
  name: arkime-live-env
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: arkime-lua
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: netbox-custom-plugins
