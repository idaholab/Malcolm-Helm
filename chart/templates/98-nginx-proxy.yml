{{- $dirinit_image := .Values.image.dirinit_container_override | default (printf "%s/dirinit:%s" .Values.image.repository .Chart.AppVersion) }}
{{- $nginx_image := .Values.image.nginx_container_override | default (printf "%s/nginx-proxy:%s" .Values.image.repository .Chart.AppVersion) }}
---
apiVersion: v1
data:
  htpasswd: {{ .Values.auth.htpass_cred | b64enc }}
kind: Secret
metadata:
  name: etc-nginx-auth
type: Opaque

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-proxy
spec:
  # use "type: ClusterIP" if using Ingress-NGINX as illustrated in 99-ingress-nginx.yml.example
  # use "type: LoadBalancer" if using AWS Load Balancer as illustrated in 99-ingress-alb.yml.example
  type: ClusterIP
  ports:
    - port: 443
      protocol: TCP
      name: https
    - port: 8443
      protocol: TCP
      name: http
    - port: 9200
      protocol: TCP
      name: opensearch
  selector:
    name: nginx-proxy-deployment

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-proxy-deployment
spec:
  selector:
    matchLabels:
      name: nginx-proxy-deployment
  replicas: 1
  template:
    metadata:
      labels:
        name: nginx-proxy-deployment
    spec:
      containers:
      - name: nginx-proxy-container
        image: "{{ $nginx_image }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        stdin: false
        tty: true
        securityContext:
          # TODO we should not be using root here
          runAsGroup: 0
          runAsUser: 0
        ports:
          - name: https
            protocol: TCP
            containerPort: 443
          - name: http
            protocol: TCP
            containerPort: 8443
          - name: opensearch
            protocol: TCP
            containerPort: 9200
        envFrom:
          - configMapRef:
              name: process-env
          - configMapRef:
              name: ssl-env
          - configMapRef:
              name: opensearch-env
          - configMapRef:
              name: dashboards-env
          - configMapRef:
              name: arkime-env
          {{- if or (eq .Values.auth.mode "keycloak") (eq .Values.auth.mode "keycloak_remote") }}
          - secretRef:
              name: keycloak-env
          {{- end }}
          - configMapRef:
              name: auth-common-env
          - configMapRef:
              name: nginx-env
        env:
        {{- if .Values.external_elasticsearch.enabled }}
          - name: DASHBOARDS_URL
            value: "{{ .Values.external_elasticsearch.external_dashboards_url }}"
        {{- end }}
        livenessProbe:
          httpGet:
            path: /
            port: 8443
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 15
          successThreshold: 1
          failureThreshold: 10
        volumeMounts:
        - name: nginx-etc-nginx-secret-volume
          mountPath: /etc/nginx/secretmap
        - name: nginx-var-local-catrust-volume
          mountPath: /var/local/ca-trust/configmap
        - name: nginx-opensearch-curlrc-secret-volume
          mountPath: /var/local/curlrc/secretmap
        - name: nginx-etc-auth-volume
          mountPath: /etc/nginx/auth
          subPath: "auth"
        - name: nginx-etc-auth-default-secret-volume
          mountPath: /tmp/auth/default/secretmap
        - name: nginx-runtime-logs-volume
          mountPath: /var/log/nginx
          subPath: "nginx"
      initContainers:
      - name: nginx-dirinit-container
        image: "{{ $dirinit_image }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        stdin: false
        tty: true
        securityContext:
          runAsGroup: 0
          runAsUser: 0
        envFrom:
          - configMapRef:
              name: process-env
        env:
          - name: PUSER_MKDIR
            value: "/data/config:auth;/data/runtime-logs:nginx"
        volumeMounts:
          - name: nginx-etc-auth-volume
            mountPath: "/data/config"
          - name: nginx-runtime-logs-volume
            mountPath: "/data/runtime-logs"
      volumes:
      - name: nginx-etc-nginx-secret-volume
        secret:
          secretName: etc-nginx
      - name: nginx-var-local-catrust-volume
        configMap:
          name: var-local-catrust
      - name: nginx-opensearch-curlrc-secret-volume
        secret:
          secretName: opensearch-curlrc
      - name: nginx-etc-auth-volume
        persistentVolumeClaim:
          claimName: config-claim
      - name: nginx-etc-auth-default-secret-volume
        secret:
          secretName: etc-nginx-auth
      - name: nginx-runtime-logs-volume
        persistentVolumeClaim:
          claimName: runtime-logs-claim
