{{- if .Values.netbox.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: netbox
spec:
  ports:
    - port: 8080
      protocol: TCP
      name: http-main
    - port: 8081
      protocol: TCP
      name: http-status
    - port: 9001
      protocol: TCP
      name: supervisord
  selector:
    name: netbox-deployment

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: netbox-deployment
spec:
  selector:
    matchLabels:
      name: netbox-deployment
  replicas: 1
  template:
    metadata:
      labels:
        name: netbox-deployment
    spec:
      containers:
      - name: netbox-container
        image: "{{ .Values.image.repository }}/netbox:{{ .Values.image.netbox_tag | default .Chart.AppVersion }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        stdin: false
        tty: true
        ports:
          - name: http-main
            protocol: TCP
            containerPort: 8080
          - name: http-status
            protocol: TCP
            containerPort: 8081
          - name: supervisord
            protocol: TCP
            containerPort: 9001
        envFrom:
          - configMapRef:
              name: process-env
          - configMapRef:
              name: ssl-env
          - configMapRef:
              name: netbox-common-env
          - configMapRef:
              name: netbox-env
          - secretRef:
              name: netbox-secret-env
        env:
          - name: VIRTUAL_HOST
            value: "netbox.malcolm.local"
        livenessProbe:
          httpGet:
            path: /netbox/api/
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 60
          timeoutSeconds: 15
          successThreshold: 1
          failureThreshold: 10
        volumeMounts:
          - mountPath: /var/local/ca-trust/configmap
            name: netbox-var-local-catrust-volume
          - mountPath: /usr/local/share/configmap
            name: netbox-netmap-json-volume
          - mountPath: /etc/netbox/config/configmap
            name: netbox-config-volume
          - mountPath: /opt/netbox-preload/configmap
            name: netbox-preload-volume
          - mountPath: /opt/netbox/netbox/media
            name: netbox-media-volume
            subPath: netbox/media
      initContainers:
      - name: netbox-dirinit-container
        image: "{{ .Values.image.repository }}/dirinit:{{ .Values.image.dirinit_tag | default .Chart.AppVersion }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        stdin: false
        tty: true
        envFrom:
          - configMapRef:
              name: process-env
        env:
          - name: PUSER_MKDIR
            value: "/data/config:netbox/media"
        volumeMounts:
          - name: netbox-media-volume
            mountPath: "/data/config"
      volumes:
        - name: netbox-var-local-catrust-volume
          configMap:
            name: var-local-catrust
        - name: netbox-netmap-json-volume
          configMap:
            name: netbox-netmap-json
        - name: netbox-config-volume
          configMap:
            name: netbox-config
        - name: netbox-preload-volume
          configMap:
            name: netbox-preload
        - name: netbox-media-volume
          persistentVolumeClaim:
            claimName: config-claim

---
apiVersion: v1
data:
  net-map.json: '[]'
kind: ConfigMap
metadata:
  name: netbox-netmap-json

---
apiVersion: v1
data:
  configuration.py: |
    ####
    ## We recommend to not edit this file.
    ## Create separate files to overwrite the settings.
    ## See `extra.py` as an example.
    ####

    import re
    from os import environ
    from os.path import abspath, dirname, join
    from typing import Any, Callable, Tuple

    # For reference see https://docs.netbox.dev/en/stable/configuration/
    # Based on https://github.com/netbox-community/netbox/blob/develop/netbox/netbox/configuration_example.py

    ###
    # NetBox-Docker Helper functions
    ###


    # Read secret from file
    def _read_secret(secret_name: str, default: str | None = None) -> str | None:
        try:
            f = open('/run/secrets/' + secret_name, 'r', encoding='utf-8')
        except EnvironmentError:
            return default
        else:
            with f:
                return f.readline().strip()


    # If the `map_fn` isn't defined, then the value that is read from the environment (or the default value if not found) is returned.
    # If the `map_fn` is defined, then `map_fn` is invoked and the value (that was read from the environment or the default value if not found)
    # is passed to it as a parameter. The value returned from `map_fn` is then the return value of this function.
    # The `map_fn` is not invoked, if the value (that was read from the environment or the default value if not found) is None.
    def _environ_get_and_map(
        variable_name: str, default: str | None = None, map_fn: Callable[[str], Any | None] = None
    ) -> Any | None:
        env_value = environ.get(variable_name, default)

        if env_value == None:
            return env_value

        if not map_fn:
            return env_value

        return map_fn(env_value)


    _AS_BOOL = lambda value: value.lower() == 'true'
    _AS_INT = lambda value: int(value)
    _AS_LIST = lambda value: list(filter(None, value.split(' ')))

    _BASE_DIR = dirname(dirname(abspath(__file__)))

    #########################
    #                       #
    #   Required settings   #
    #                       #
    #########################

    # This is a list of valid fully-qualified domain names (FQDNs) for the NetBox server. NetBox will not permit write
    # access to the server via any other hostnames. The first FQDN in the list will be treated as the preferred name.
    #
    # Example: ALLOWED_HOSTS = ['netbox.example.com', 'netbox.internal.local']
    ALLOWED_HOSTS = environ.get('ALLOWED_HOSTS', '*').split(' ')
    # ensure that '*' or 'localhost' is always in ALLOWED_HOSTS (needed for health checks)
    if '*' not in ALLOWED_HOSTS and 'localhost' not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append('localhost')

    # PostgreSQL database configuration. See the Django documentation for a complete list of available parameters:
    #   https://docs.djangoproject.com/en/stable/ref/settings/#databases
    DATABASE = {
        'NAME': environ.get('DB_NAME', 'netbox'),  # Database name
        'USER': environ.get('DB_USER', ''),  # PostgreSQL username
        'PASSWORD': _read_secret('db_password', environ.get('DB_PASSWORD', '')),
        # PostgreSQL password
        'HOST': environ.get('DB_HOST', 'localhost'),  # Database server
        'PORT': environ.get('DB_PORT', ''),  # Database port (leave blank for default)
        'OPTIONS': {'sslmode': environ.get('DB_SSLMODE', 'prefer')},
        # Database connection SSLMODE
        'CONN_MAX_AGE': _environ_get_and_map('DB_CONN_MAX_AGE', '300', _AS_INT),
        # Max database connection age
        'DISABLE_SERVER_SIDE_CURSORS': _environ_get_and_map('DB_DISABLE_SERVER_SIDE_CURSORS', 'False', _AS_BOOL),
        # Disable the use of server-side cursors transaction pooling
    }

    # Redis database settings. Redis is used for caching and for queuing background tasks such as webhook events. A separate
    # configuration exists for each. Full connection details are required in both sections, and it is strongly recommended
    # to use two separate database IDs.
    REDIS = {
        'tasks': {
            'HOST': environ.get('REDIS_HOST', 'localhost'),
            'PORT': _environ_get_and_map('REDIS_PORT', 6379, _AS_INT),
            'USERNAME': environ.get('REDIS_USERNAME', ''),
            'PASSWORD': _read_secret('redis_password', environ.get('REDIS_PASSWORD', '')),
            'DATABASE': _environ_get_and_map('REDIS_DATABASE', 0, _AS_INT),
            'SSL': _environ_get_and_map('REDIS_SSL', 'False', _AS_BOOL),
            'INSECURE_SKIP_TLS_VERIFY': _environ_get_and_map('REDIS_INSECURE_SKIP_TLS_VERIFY', 'False', _AS_BOOL),
        },
        'caching': {
            'HOST': environ.get('REDIS_CACHE_HOST', environ.get('REDIS_HOST', 'localhost')),
            'PORT': _environ_get_and_map('REDIS_CACHE_PORT', environ.get('REDIS_PORT', '6379'), _AS_INT),
            'USERNAME': environ.get('REDIS_CACHE_USERNAME', environ.get('REDIS_USERNAME', '')),
            'PASSWORD': _read_secret(
                'redis_cache_password', environ.get('REDIS_CACHE_PASSWORD', environ.get('REDIS_PASSWORD', ''))
            ),
            'DATABASE': _environ_get_and_map('REDIS_CACHE_DATABASE', '1', _AS_INT),
            'SSL': _environ_get_and_map('REDIS_CACHE_SSL', environ.get('REDIS_SSL', 'False'), _AS_BOOL),
            'INSECURE_SKIP_TLS_VERIFY': _environ_get_and_map(
                'REDIS_CACHE_INSECURE_SKIP_TLS_VERIFY', environ.get('REDIS_INSECURE_SKIP_TLS_VERIFY', 'False'), _AS_BOOL
            ),
        },
    }

    # This key is used for secure generation of random numbers and strings. It must never be exposed outside of this file.
    # For optimal security, SECRET_KEY should be at least 50 characters in length and contain a mix of letters, numbers, and
    # symbols. NetBox will not run without this defined. For more information, see
    # https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-SECRET_KEY
    SECRET_KEY = _read_secret('secret_key', environ.get('SECRET_KEY', ''))


    #########################
    #                       #
    #   Optional settings   #
    #                       #
    #########################

    # # Specify one or more name and email address tuples representing NetBox administrators. These people will be notified of
    # # application errors (assuming correct email settings are provided).
    # ADMINS = [
    #    # ['John Doe', 'jdoe@example.com'],
    # ]

    if 'ALLOWED_URL_SCHEMES' in environ:
        ALLOWED_URL_SCHEMES = _environ_get_and_map('ALLOWED_URL_SCHEMES', None, _AS_LIST)

    # Optionally display a persistent banner at the top and/or bottom of every page. HTML is allowed. To display the same
    # content in both banners, define BANNER_TOP and set BANNER_BOTTOM = BANNER_TOP.
    if 'BANNER_TOP' in environ:
        BANNER_TOP = environ.get('BANNER_TOP', None)
    if 'BANNER_BOTTOM' in environ:
        BANNER_BOTTOM = environ.get('BANNER_BOTTOM', None)

    # Text to include on the login page above the login form. HTML is allowed.
    if 'BANNER_LOGIN' in environ:
        BANNER_LOGIN = environ.get('BANNER_LOGIN', None)

    # Base URL path if accessing NetBox within a directory. For example, if installed at http://example.com/netbox/, set:
    # BASE_PATH = 'netbox/'
    if 'BASE_PATH' in environ:
        BASE_PATH = environ.get('BASE_PATH', '')

    # Maximum number of days to retain logged changes. Set to 0 to retain changes indefinitely. (Default: 90)
    if 'CHANGELOG_RETENTION' in environ:
        CHANGELOG_RETENTION = _environ_get_and_map('CHANGELOG_RETENTION', None, _AS_INT)

    # Maximum number of days to retain job results (scripts and reports). Set to 0 to retain job results in the database indefinitely. (Default: 90)
    if 'JOB_RETENTION' in environ:
        JOB_RETENTION = _environ_get_and_map('JOB_RETENTION', None, _AS_INT)
    # JOBRESULT_RETENTION was renamed to JOB_RETENTION in the v3.5.0 release of NetBox. For backwards compatibility, map JOBRESULT_RETENTION to JOB_RETENTION
    elif 'JOBRESULT_RETENTION' in environ:
        JOB_RETENTION = _environ_get_and_map('JOBRESULT_RETENTION', None, _AS_INT)

    # API Cross-Origin Resource Sharing (CORS) settings. If CORS_ORIGIN_ALLOW_ALL is set to True, all origins will be
    # allowed. Otherwise, define a list of allowed origins using either CORS_ORIGIN_WHITELIST or
    # CORS_ORIGIN_REGEX_WHITELIST. For more information, see https://github.com/ottoyiu/django-cors-headers
    CORS_ORIGIN_ALLOW_ALL = _environ_get_and_map('CORS_ORIGIN_ALLOW_ALL', 'False', _AS_BOOL)
    CORS_ORIGIN_WHITELIST = _environ_get_and_map('CORS_ORIGIN_WHITELIST', 'https://localhost', _AS_LIST)
    CORS_ORIGIN_REGEX_WHITELIST = [re.compile(r) for r in _environ_get_and_map('CORS_ORIGIN_REGEX_WHITELIST', '', _AS_LIST)]

    # Set to True to enable server debugging. WARNING: Debugging introduces a substantial performance penalty and may reveal
    # sensitive information about your installation. Only enable debugging while performing testing.
    # Never enable debugging on a production system.
    DEBUG = _environ_get_and_map('DEBUG', 'False', _AS_BOOL)

    # This parameter serves as a safeguard to prevent some potentially dangerous behavior,
    # such as generating new database schema migrations.
    # Set this to True only if you are actively developing the NetBox code base.
    DEVELOPER = _environ_get_and_map('DEVELOPER', 'False', _AS_BOOL)

    # Email settings
    EMAIL = {
        'SERVER': environ.get('EMAIL_SERVER', 'localhost'),
        'PORT': _environ_get_and_map('EMAIL_PORT', 25, _AS_INT),
        'USERNAME': environ.get('EMAIL_USERNAME', ''),
        'PASSWORD': _read_secret('email_password', environ.get('EMAIL_PASSWORD', '')),
        'USE_SSL': _environ_get_and_map('EMAIL_USE_SSL', 'False', _AS_BOOL),
        'USE_TLS': _environ_get_and_map('EMAIL_USE_TLS', 'False', _AS_BOOL),
        'SSL_CERTFILE': environ.get('EMAIL_SSL_CERTFILE', ''),
        'SSL_KEYFILE': environ.get('EMAIL_SSL_KEYFILE', ''),
        'TIMEOUT': _environ_get_and_map('EMAIL_TIMEOUT', 10, _AS_INT),  # seconds
        'FROM_EMAIL': environ.get('EMAIL_FROM', ''),
    }

    # Enforcement of unique IP space can be toggled on a per-VRF basis. To enforce unique IP space within the global table
    # (all prefixes and IP addresses not assigned to a VRF), set ENFORCE_GLOBAL_UNIQUE to True.
    if 'ENFORCE_GLOBAL_UNIQUE' in environ:
        ENFORCE_GLOBAL_UNIQUE = _environ_get_and_map('ENFORCE_GLOBAL_UNIQUE', None, _AS_BOOL)

    # Exempt certain models from the enforcement of view permissions. Models listed here will be viewable by all users and
    # by anonymous users. List models in the form `<app>.<model>`. Add '*' to this list to exempt all models.
    EXEMPT_VIEW_PERMISSIONS = _environ_get_and_map('EXEMPT_VIEW_PERMISSIONS', '', _AS_LIST)

    # HTTP proxies NetBox should use when sending outbound HTTP requests (e.g. for webhooks).
    # HTTP_PROXIES = {
    #     'http': 'http://10.10.1.10:3128',
    #     'https': 'http://10.10.1.10:1080',
    # }

    # IP addresses recognized as internal to the system. The debugging toolbar will be available only to clients accessing
    # NetBox from an internal IP.
    INTERNAL_IPS = _environ_get_and_map('INTERNAL_IPS', '127.0.0.1 ::1', _AS_LIST)

    # Enable GraphQL API.
    if 'GRAPHQL_ENABLED' in environ:
        GRAPHQL_ENABLED = _environ_get_and_map('GRAPHQL_ENABLED', None, _AS_BOOL)

    # # Enable custom logging. Please see the Django documentation for detailed guidance on configuring custom logs:
    # #   https://docs.djangoproject.com/en/stable/topics/logging/
    # LOGGING = {}

    # Automatically reset the lifetime of a valid session upon each authenticated request. Enables users to remain
    # authenticated to NetBox indefinitely.
    LOGIN_PERSISTENCE = _environ_get_and_map('LOGIN_PERSISTENCE', 'False', _AS_BOOL)

    # Setting this to True will permit only authenticated users to access any part of NetBox. By default, anonymous users
    # are permitted to access most data in NetBox (excluding secrets) but not make any changes.
    LOGIN_REQUIRED = _environ_get_and_map('LOGIN_REQUIRED', 'False', _AS_BOOL)

    # The length of time (in seconds) for which a user will remain logged into the web UI before being prompted to
    # re-authenticate. (Default: 1209600 [14 days])
    LOGIN_TIMEOUT = _environ_get_and_map('LOGIN_TIMEOUT', 1209600, _AS_INT)

    # Setting this to True will display a "maintenance mode" banner at the top of every page.
    if 'MAINTENANCE_MODE' in environ:
        MAINTENANCE_MODE = _environ_get_and_map('MAINTENANCE_MODE', None, _AS_BOOL)

    # Maps provider
    if 'MAPS_URL' in environ:
        MAPS_URL = environ.get('MAPS_URL', None)

    # An API consumer can request an arbitrary number of objects =by appending the "limit" parameter to the URL (e.g.
    # "?limit=1000"). This setting defines the maximum limit. Setting it to 0 or None will allow an API consumer to request
    # all objects by specifying "?limit=0".
    if 'MAX_PAGE_SIZE' in environ:
        MAX_PAGE_SIZE = _environ_get_and_map('MAX_PAGE_SIZE', None, _AS_INT)

    # The file path where uploaded media such as image attachments are stored. A trailing slash is not needed. Note that
    # the default value of this setting is derived from the installed location.
    MEDIA_ROOT = environ.get('MEDIA_ROOT', join(_BASE_DIR, 'media'))

    # Expose Prometheus monitoring metrics at the HTTP endpoint '/metrics'
    METRICS_ENABLED = _environ_get_and_map('METRICS_ENABLED', 'False', _AS_BOOL)

    # Determine how many objects to display per page within a list. (Default: 50)
    if 'PAGINATE_COUNT' in environ:
        PAGINATE_COUNT = _environ_get_and_map('PAGINATE_COUNT', None, _AS_INT)

    # # Enable installed plugins. Add the name of each plugin to the list.
    # PLUGINS = []

    # # Plugins configuration settings. These settings are used by various plugins that the user may have installed.
    # # Each key in the dictionary is the name of an installed plugin and its value is a dictionary of settings.
    # PLUGINS_CONFIG = {
    # }

    # When determining the primary IP address for a device, IPv6 is preferred over IPv4 by default. Set this to True to
    # prefer IPv4 instead.
    if 'PREFER_IPV4' in environ:
        PREFER_IPV4 = _environ_get_and_map('PREFER_IPV4', None, _AS_BOOL)

    # The default value for the amperage field when creating new power feeds.
    if 'POWERFEED_DEFAULT_AMPERAGE' in environ:
        POWERFEED_DEFAULT_AMPERAGE = _environ_get_and_map('POWERFEED_DEFAULT_AMPERAGE', None, _AS_INT)

    # The default value (percentage) for the max_utilization field when creating new power feeds.
    if 'POWERFEED_DEFAULT_MAX_UTILIZATION' in environ:
        POWERFEED_DEFAULT_MAX_UTILIZATION = _environ_get_and_map('POWERFEED_DEFAULT_MAX_UTILIZATION', None, _AS_INT)

    # The default value for the voltage field when creating new power feeds.
    if 'POWERFEED_DEFAULT_VOLTAGE' in environ:
        POWERFEED_DEFAULT_VOLTAGE = _environ_get_and_map('POWERFEED_DEFAULT_VOLTAGE', None, _AS_INT)

    # Rack elevation size defaults, in pixels. For best results, the ratio of width to height should be roughly 10:1.
    if 'RACK_ELEVATION_DEFAULT_UNIT_HEIGHT' in environ:
        RACK_ELEVATION_DEFAULT_UNIT_HEIGHT = _environ_get_and_map('RACK_ELEVATION_DEFAULT_UNIT_HEIGHT', None, _AS_INT)
    if 'RACK_ELEVATION_DEFAULT_UNIT_WIDTH' in environ:
        RACK_ELEVATION_DEFAULT_UNIT_WIDTH = _environ_get_and_map('RACK_ELEVATION_DEFAULT_UNIT_WIDTH', None, _AS_INT)

    # Remote authentication support
    REMOTE_AUTH_ENABLED = _environ_get_and_map('REMOTE_AUTH_ENABLED', 'False', _AS_BOOL)
    REMOTE_AUTH_BACKEND = _environ_get_and_map('REMOTE_AUTH_BACKEND', 'netbox.authentication.RemoteUserBackend', _AS_LIST)
    REMOTE_AUTH_HEADER = environ.get('REMOTE_AUTH_HEADER', 'HTTP_REMOTE_USER')
    REMOTE_AUTH_AUTO_CREATE_USER = _environ_get_and_map('REMOTE_AUTH_AUTO_CREATE_USER', 'False', _AS_BOOL)
    REMOTE_AUTH_DEFAULT_GROUPS = _environ_get_and_map('REMOTE_AUTH_DEFAULT_GROUPS', '', _AS_LIST)
    # REMOTE_AUTH_DEFAULT_PERMISSIONS = {}

    # This repository is used to check whether there is a new release of NetBox available. Set to None to disable the
    # version check or use the URL below to check for release in the official NetBox repository.
    RELEASE_CHECK_URL = environ.get('RELEASE_CHECK_URL', None)
    # RELEASE_CHECK_URL = 'https://api.github.com/repos/netbox-community/netbox/releases'

    # Maximum execution time for background tasks, in seconds.
    RQ_DEFAULT_TIMEOUT = _environ_get_and_map('RQ_DEFAULT_TIMEOUT', 300, _AS_INT)

    # The name to use for the csrf token cookie.
    CSRF_COOKIE_NAME = environ.get('CSRF_COOKIE_NAME', 'csrftoken')

    # Cross-Site-Request-Forgery-Attack settings. If Netbox is sitting behind a reverse proxy, you might need to set the CSRF_TRUSTED_ORIGINS flag.
    # Django 4.0 requires to specify the URL Scheme in this setting. An example environment variable could be specified like:
    # CSRF_TRUSTED_ORIGINS=https://demo.netbox.dev http://demo.netbox.dev
    CSRF_TRUSTED_ORIGINS = _environ_get_and_map('CSRF_TRUSTED_ORIGINS', '', _AS_LIST)

    # The name to use for the session cookie.
    SESSION_COOKIE_NAME = environ.get('SESSION_COOKIE_NAME', 'sessionid')

    # By default, NetBox will store session data in the database. Alternatively, a file path can be specified here to use
    # local file storage instead. (This can be useful for enabling authentication on a standby instance with read-only
    # database access.) Note that the user as which NetBox runs must have read and write permissions to this path.
    SESSION_FILE_PATH = environ.get('SESSION_FILE_PATH', environ.get('SESSIONS_ROOT', None))

    # Time zone (default: UTC)
    TIME_ZONE = environ.get('TIME_ZONE', 'UTC')

    # Date/time formatting. See the following link for supported formats:
    # https://docs.djangoproject.com/en/stable/ref/templates/builtins/#date
    DATE_FORMAT = environ.get('DATE_FORMAT', 'N j, Y')
    SHORT_DATE_FORMAT = environ.get('SHORT_DATE_FORMAT', 'Y-m-d')
    TIME_FORMAT = environ.get('TIME_FORMAT', 'g:i a')
    SHORT_TIME_FORMAT = environ.get('SHORT_TIME_FORMAT', 'H:i:s')
    DATETIME_FORMAT = environ.get('DATETIME_FORMAT', 'N j, Y g:i a')
    SHORT_DATETIME_FORMAT = environ.get('SHORT_DATETIME_FORMAT', 'Y-m-d H:i')
  extra.py: |
    ####
    ## This file contains extra configuration options that can't be configured
    ## directly through environment variables.
    ####

    ## Specify one or more name and email address tuples representing NetBox administrators. These people will be notified of
    ## application errors (assuming correct email settings are provided).
    # ADMINS = [
    #     # ['John Doe', 'jdoe@example.com'],
    # ]


    ## URL schemes that are allowed within links in NetBox
    # ALLOWED_URL_SCHEMES = (
    #     'file', 'ftp', 'ftps', 'http', 'https', 'irc', 'mailto', 'sftp', 'ssh', 'tel', 'telnet', 'tftp', 'vnc', 'xmpp',
    # )

    ## Enable installed plugins. Add the name of each plugin to the list.
    # from netbox.configuration.configuration import PLUGINS
    # PLUGINS.append('my_plugin')

    ## Plugins configuration settings. These settings are used by various plugins that the user may have installed.
    ## Each key in the dictionary is the name of an installed plugin and its value is a dictionary of settings.
    # from netbox.configuration.configuration import PLUGINS_CONFIG
    # PLUGINS_CONFIG['my_plugin'] = {
    #   'foo': 'bar',
    #   'buzz': 'bazz'
    # }


    ## Remote authentication support
    # REMOTE_AUTH_DEFAULT_PERMISSIONS = {}


    ## By default uploaded media is stored on the local filesystem. Using Django-storages is also supported. Provide the
    ## class path of the storage driver in STORAGE_BACKEND and any configuration options in STORAGE_CONFIG. For example:
    # STORAGE_BACKEND = 'storages.backends.s3boto3.S3Boto3Storage'
    # STORAGE_CONFIG = {
    #     'AWS_ACCESS_KEY_ID': 'Key ID',
    #     'AWS_SECRET_ACCESS_KEY': 'Secret',
    #     'AWS_STORAGE_BUCKET_NAME': 'netbox',
    #     'AWS_S3_REGION_NAME': 'eu-west-1',
    # }


    ## This file can contain arbitrary Python code, e.g.:
    # from datetime import datetime
    # now = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    # BANNER_TOP = f'<marquee width="200px">This instance started on {now}.</marquee>'
  logging.py: |
    # # Remove first comment(#) on each line to implement this working logging example.
    # # Add LOGLEVEL environment variable to netbox if you use this example & want a different log level.
    # from os import environ

    # # Set LOGLEVEL in netbox.env or docker-compose.overide.yml to override a logging level of INFO.
    # LOGLEVEL = environ.get('LOGLEVEL', 'INFO')

    # LOGGING = {

    #    'version': 1,
    #    'disable_existing_loggers': False,
    #    'formatters': {
    #        'verbose': {
    #            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
    #            'style': '{',
    #        },
    #        'simple': {
    #            'format': '{levelname} {message}',
    #            'style': '{',
    #        },
    #    },
    #    'filters': {
    #        'require_debug_false': {
    #            '()': 'django.utils.log.RequireDebugFalse',
    #        },
    #    },
    #    'handlers': {
    #        'console': {
    #            'level': LOGLEVEL,
    #            'filters': ['require_debug_false'],
    #            'class': 'logging.StreamHandler',
    #            'formatter': 'simple'
    #        },
    #        'mail_admins': {
    #            'level': 'ERROR',
    #            'class': 'django.utils.log.AdminEmailHandler',
    #            'filters': ['require_debug_false']
    #        }
    #    },
    #    'loggers': {
    #        'django': {
    #            'handlers': ['console'],
    #            'propagate': True,
    #        },
    #        'django.request': {
    #            'handlers': ['mail_admins'],
    #            'level': 'ERROR',
    #            'propagate': False,
    #        },
    #        'django_auth_ldap': {
    #            'handlers': ['console',],
    #            'level': LOGLEVEL,
    #        }
    #    }
    # }
  plugins.py: |
    # Add your plugins and plugin settings here.
    # Of course uncomment this file out.

    # To learn how to build images with your required plugins
    # See https://github.com/netbox-community/netbox-docker/wiki/Using-Netbox-Plugins

    PLUGINS = [
        'netbox_initializers',
    ]

    # PLUGINS_CONFIG = {
    #   "netbox_bgp": {
    #     ADD YOUR SETTINGS HERE
    #   }
    # }
kind: ConfigMap
metadata:
  name: netbox-config

---
apiVersion: v1
data:
  device_roles.yml: |
    - name: Access point
      slug: access-point
      color: Pink
      vm_role: true
    - name: Application server
      slug: application-server
      color: Green
      vm_role: true
    - name: Authentication server
      slug: authentication-server
      color: Dark Green
      vm_role: true
    - name: BAS
      slug: bas
      description: Building automation
      color: Amber
      vm_role: true
    - name: BMS
      slug: bms
      description: Building management
      color: Amber
      vm_role: true
    - name: Bridge
      slug: bridge
      color: Pink
      vm_role: true
    - name: CNC
      slug: cnc
      description: Computer numerical control
      color: Indigo
      vm_role: true
    - name: Camera
      slug: camera
      color: Amber
      vm_role: true
    - name: Cloud server
      slug: cloud-server
      color: Green
      vm_role: true
    - name: Collaboration server
      slug: collaboration-server
      color: Green
      vm_role: true
    - name: DCS
      slug: dcs
      description: Distributed control system
      color: Purple
      vm_role: true
    - name: DHCP server
      slug: dhcp-server
      description: Dynamic host communication protocol server
      color: Dark Green
      vm_role: true
    - name: DNS server
      slug: dns-server
      description: Domain name system server
      color: Dark Green
      vm_role: true
    - name: Database server
      slug: database-server
      color: Green
      vm_role: true
    - name: Domain controller
      slug: domain-controller
      color: Dark Green
      vm_role: true
    - name: EACS
      slug: eacs
      description: Electronic access control
      color: Amber
      vm_role: true
    - name: Fax
      slug: fax
      color: Cyan
      vm_role: true
    - name: File server
      slug: file-server
      color: Green
      vm_role: true
    - name: Firewall
      slug: firewall
      color: Dark Red
      vm_role: true
    - name: Gateway
      slug: gateway
      color: Pink
      vm_role: true
    - name: HMI
      slug: hmi
      description: Human machine interface
      color: Purple
      vm_role: true
    - name: HVAC
      slug: hvac
      description: Heating, ventilation and air conditioning
      color: Amber
      vm_role: true
    - name: Historian
      slug: historian
      color: Purple
      vm_role: true
    - name: Hub
      slug: hub
      color: Grey
      vm_role: true
    - name: Hypervisor
      slug: hypervisor
      color: Light Green
      vm_role: true
    - name: IDS
      slug: ids
      description: Intrusion detection system
      color: Fuchsia
      vm_role: true
    - name: IIoT
      slug: iiot
      description: Industrial internet of things device
      color: Purple
      vm_role: true
    - name: IPS
      slug: ips
      description: Intrusion prevention system
      color: Fuchsia
      vm_role: true
    - name: IoT
      slug: iot
      description: Internet of things device
      color: Light Blue
      vm_role: true
    - name: KVM
      slug: kvm
      description: Keyboard, video and mouse switch
      color: Light Blue
      vm_role: true
    - name: Kiosk
      slug: kiosk
      color: Light Blue
      vm_role: true
    - name: Lighting
      slug: lighting
      description: Lighting controls
      color: Amber
      vm_role: true
    - name: Load balancer
      slug: load-balancer
      color: Pink
      vm_role: true
    - name: MES
      slug: mes
      description: Manufacturing execution system
      color: Indigo
      vm_role: true
    - name: Mail server
      slug: mail-server
      color: Green
      vm_role: true
    - name: Media server
      slug: media-server
      color: Green
      vm_role: true
    - name: Modem
      slug: modem
      color: Pink
      vm_role: true
    - name: NAS
      slug: nas
      description: Network attached storage
      color: Green
      vm_role: true
    - name: NTP server
      slug: ntp-server
      description: Network time protocol server
      color: Dark Green
      vm_role: true
    - name: Network sensor
      slug: network-sensor
      color: Fuchsia
      vm_role: true
    - name: PLC
      slug: plc
      description: Programmable logic controller
      color: Purple
      vm_role: true
    - name: PLM
      slug: plm
      description: Product lifecycle management system
      color: Indigo
      vm_role: true
    - name: Photocopier
      slug: photocopier
      color: Light Blue
      vm_role: true
    - name: Physical sensor
      slug: physical-sensor
      color: Indigo
      vm_role: true
    - name: Print server
      slug: print-server
      color: Green
      vm_role: true
    - name: Printer
      slug: printer
      color: Light Blue
      vm_role: true
    - name: Proxy server
      slug: proxy-server
      color: Dark Green
      vm_role: true
    - name: RTU
      slug: rtu
      description: Remote terminal unit
      color: Purple
      vm_role: true
    - name: Real-time communication server
      slug: real-time-communication-server
      color: Dark Green
      vm_role: true
    - name: Repeater
      slug: repeater
      color: Pink
      vm_role: true
    - name: Router
      slug: router
      color: Pink
      vm_role: true
    - name: SCADA
      slug: scada
      description: Supervisory control and data acquisition
      color: Purple
      vm_role: true
    - name: SIEM
      slug: siem
      description: Security information and event management
      color: Fuchsia
      vm_role: true
    - name: Safety automation system
      slug: safety-automation-system
      color: Amber
      vm_role: true
    - name: Scanner
      slug: scanner
      color: Light Blue
      vm_role: true
    - name: Server
      slug: server
      color: Green
      vm_role: true
    - name: Switch
      slug: switch
      color: Grey
      vm_role: true
    - name: Telephony
      slug: telephony
      color: Cyan
      vm_role: true
    - name: VCS
      slug: vcs
      description: Version control system
      color: Green
      vm_role: true
    - name: VFD
      slug: vfd
      description: Variable frequency drive
      color: Indigo
      vm_role: true
    - name: VPN server
      slug: vpn-server
      description: Virtual private network server
      color: Dark Green
      vm_role: true
    - name: Web server
      slug: web-server
      color: Green
      vm_role: true
    - name: Workstation
      slug: workstation
      color: Light Green
      vm_role: true
    - name: Virtual Machine Server
      slug: vm-server
      color: Light Green
      vm_role: true
  initializers.txt: |-
    Files in this directory should be formatted for import by the netbox-initializers
    plugin (https://github.com/tobiasge/netbox-initializers).
  manufacturers.yml: |
    - name: ABB
      slug: abb
    - name: Accenture
      slug: accenture
    - name: Emerson Electric
      slug: emerson-electric
    - name: General Electric
      slug: general-electric
    - name: Hitachi
      slug: hitachi
    - name: Honeywell
      slug: honeywell
    - name: Mitsubishi
      slug: mitsubishi
    - name: Oracle
      slug: oracle
    - name: Schneider Electric
      slug: schneider-electric
    - name: Yokogawa Electric
      slug: yokogawa-electric
    - name: Unspecified
      slug: unspecified
  service_templates.yml: |
    - name: FTP
      protocol: TCP
      ports:
        - 20
        - 21
    - name: SSH
      protocol: TCP
      ports:
        - 22
    - name: Telnet
      protocol: TCP
      ports:
        - 23
    - name: SMTP
      protocol: TCP
      ports:
        - 25
        - 2525
    - name: DNS (UDP)
      protocol: UDP
      ports:
        - 53
        - 853
        - 5353
    - name: DNS (TCP)
      protocol: TCP
      ports:
        - 53
        - 853
        - 5353
    - name: DHCP
      protocol: UDP
      ports:
        - 67
        - 68
        - 546
        - 547
    - name: HTTP
      protocol: TCP
      ports:
        - 80
        - 8000
        - 8080
    - name: COTP and S7comm
      protocol: TCP
      ports:
        - 102
    - name: POP3
      protocol: TCP
      ports:
        - 110
    - name: SFTP
      protocol: TCP
      ports:
        - 115
    - name: NTP
      protocol: TCP
      ports:
        - 123
    - name: Microsoft-DS (UDP)
      protocol: UDP
      ports:
        - 135
        - 137
        - 138
        - 445
        - 3702
    - name: Microsoft-DS (TCP)
      protocol: TCP
      ports:
        - 135
        - 139
        - 445
        - 5357
        - 5358
    - name: NetBIOS (TCP)
      protocol: TCP
      ports:
        - 137
        - 138
        - 139
    - name: NetBIOS (UDP)
      protocol: UDP
      ports:
        - 137
        - 138
        - 139
    - name: IMAP
      protocol: TCP
      ports:
        - 143
    - name: SNMP
      protocol: UDP
      ports:
        - 161
        - 162
    - name: LDAP (UDP)
      protocol: UDP
      ports:
        - 389
        - 3268
    - name: LDAP (TCP)
      protocol: TCP
      ports:
        - 389
        - 3268
    - name: HTTPS
      protocol: TCP
      ports:
        - 443
        - 8443
    - name: SMTP SSL/TLS
      protocol: TCP
      ports:
        - 465
        - 587
    - name: IPSec (UDP)
      protocol: UDP
      ports:
        - 500
        - 4500
    - name: IPSec (TCP)
      protocol: TCP
      ports:
        - 500
        - 4500
    - name: Modbus (UDP)
      protocol: UDP
      ports:
        - 502
    - name: Modbus (TCP)
      protocol: TCP
      ports:
        - 502
        - 802
    - name: Syslog (UDP)
      protocol: UDP
      ports:
        - 514
        - 601
    - name: Syslog (TCP)
      protocol: TCP
      ports:
        - 514
        - 601
    - name: LPD
      protocol: TCP
      ports:
        - 515
    - name: IPP and CUPS (UDP)
      protocol: UDP
      ports:
        - 631
    - name: IPP and CUPS (TCP)
      protocol: TCP
      ports:
        - 631
    - name: LDAP SSL/TLS (UDP)
      protocol: UDP
      ports:
        - 636
        - 3269
    - name: LDAP SSL/TLS (TCP)
      protocol: TCP
      ports:
        - 636
        - 3269
    - name: rsync
      protocol: TCP
      ports:
        - 873
    - name: FTP SSL/TLS
      protocol: TCP
      ports:
        - 989
        - 990
    - name: Telnet SSL/TLS
      protocol: TCP
      ports:
        - 992
    - name: IMAP SSL/TLS
      protocol: TCP
      ports:
        - 993
    - name: POP3 SSL/TLS
      protocol: TCP
      ports:
        - 995
    - name: OpenVPN (UDP)
      protocol: UDP
      ports:
        - 1194
    - name: OpenVPN (TCP)
      protocol: TCP
      ports:
        - 1194
    - name: MSSQL
      protocol: TCP
      ports:
        - 1433
        - 1434
        - 5022
    - name: Tabular Data Stream
      protocol: TCP
      ports:
        - 1443
    - name: CIP and EtherNet/IP (UDP)
      protocol: UDP
      ports:
        - 2222
        - 44818
    - name: CIP and EtherNet/IP (TCP)
      protocol: TCP
      ports:
        - 2222
        - 44818
    - name: MySQL
      protocol: TCP
      ports:
        - 3306
    - name: RDP
      protocol: TCP
      ports:
        - 3389
    - name: LLMNR (UDP)
      protocol: UDP
      ports:
        - 5355
    - name: LLMNR (TCP)
      protocol: TCP
      ports:
        - 5355
    - name: PostgreSQL
      protocol: TCP
      ports:
        - 5432
    - name: VNC
      protocol: TCP
      ports:
        - 5800
        - 5900
        - 5901
        - 5902
        - 5903
        - 5904
        - 5905
        - 5906
        - 5907
        - 5908
        - 5909
        - 5910
        - 6000
    - name: AppSocket and JetDirect
      protocol: TCP
      ports:
        - 9100
        - 9101
        - 9102
    - name: Git
      protocol: TCP
      ports:
        - 9418
    - name: BACnet (UDP)
      protocol: UDP
      ports:
        - 47808
    - name: BACnet (TCP)
      protocol: TCP
      ports:
        - 47808
    - name: WireGuard
      protocol: UDP
      ports:
        - 51820
kind: ConfigMap
metadata:
  name: netbox-preload

{{- end }}