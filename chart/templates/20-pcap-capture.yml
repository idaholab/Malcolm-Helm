{{- if .Values.pcap_live.enabled }}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: pcap-capture-deployment
spec:
  selector:
    matchLabels:
      name: pcap-capture-deployment
  template:
    metadata:
      labels:
        name: pcap-capture-deployment
    spec:
      # Required for coredns to work with hostnetwork set to true.
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      nodeSelector:
{{ toYaml .Values.pcap_live.nodeSelector | indent 8 }}
{{- with .Values.live_capture.tolerations }}
      tolerations:
{{ toYaml . | indent 6 }}
{{- end }}
      containers:
      - name: pcap-capture-container
        image: "{{ .Values.image.repository }}/pcap-capture:{{ .Values.image.pcap_capture_tag | default .Chart.AppVersion }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        stdin: false
        tty: true
        securityContext:
          capabilities:
            add:
              # IPC_LOCK required for some of the memory optimizations netsniff-ng does
              - IPC_LOCK
              # SYS_RESOURCE - for increasing memlock limits
              - SYS_RESOURCE
              # SYS_ADMIN - for netsniff-ng to set the disc I/O scheduler policy
              - SYS_ADMIN
              # NET_ADMIN and NET_RAW - to turn on promiscuous mode and capture raw packets
              - NET_ADMIN
              - NET_RAW
        envFrom:
          - configMapRef:
              name: process-env
          - configMapRef:
              name: ssl-env
          - configMapRef:
              name: pcap-capture-env
        env:
          - name: PCAP_CAPTURE_DISABLED
            value: "false"
        volumeMounts:
          - mountPath: /var/local/ca-trust/configmap
            name: capture-var-local-catrust-volume
          - mountPath: "/pcap"
            name: capture-pcap-volume
            subPath: "upload"
      initContainers:
      - name: pcap-capture-dirinit-container
        image: "{{ .Values.image.repository }}/dirinit:{{ .Values.image.dirinit_tag | default .Chart.AppVersion }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        stdin: false
        tty: true
        securityContext:
          runAsGroup: 0
          runAsUser: 0
        envFrom:
          - configMapRef:
              name: process-env
        env:
          - name: PUSER_MKDIR
            value: "/data/pcap:processed,upload"
        volumeMounts:
          - name: capture-pcap-volume
            mountPath: "/data/pcap"
      volumes:
        - name: capture-var-local-catrust-volume
          configMap:
            name: var-local-catrust
        - name: capture-pcap-volume
          persistentVolumeClaim:
            claimName: pcap-claim
{{- end }}
